# remove YJH from dataset & reprocess (use SCTransform)################################################################

dt <- PercentageFeatureSet(dt, pattern = "^MT-", col.name = "percent.mt")
dt <- SCTransform(dt, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)

# png('/data/project/RCC_HWS/SS/sc/seurat/pro10.ElbowPlot.png')
# ElbowPlot(dt, dims=1:30)
# dev.off()

dt <- RunPCA(dt, verbose=FALSE)
dt <- RunUMAP(dt, dims = 1:50, verbose=FALSE)
dt <- FindNeighbors(dt, dims = 1:50, verbose=FALSE)
dt <- FindClusters(dt, resolution = 1.1, verbose=FALSE)

dt <- SetIdent(dt, value = dt@meta.data$seurat_clusters)
png('/data/project/RCC_HWS/SS/sc/seurat/pro10.umap.png')
DimPlot(dt, reduction = "umap", label=TRUE)
dev.off()
png('/data/project/RCC_HWS/SS/sc/seurat/pro10.umap.id.png')
DimPlot(dt, reduction = "umap", group.by='donor_id')
dev.off()
png('/data/project/RCC_HWS/SS/sc/seurat/pro10.umap.stat.png')
DimPlot(dt, reduction = "umap", group.by='Status')
dev.off()
png('/data/project/RCC_HWS/SS/sc/seurat/pro10.umap.subtype.png')
DimPlot(dt, reduction = "umap", group.by='subtype_2')
dev.off()

#FindMarkers
dt <- SetIdent(dt, value = dt$seurat_clusters)
dt.markers <- FindAllMarkers(dt, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
# saveRDS(dt.markers,'/data/project/RCC_HWS/SS/sc/seurat/all_markers.rds')
tbl <- dt.markers %>%
    group_by(cluster) %>%
    slice_max(n = 50, order_by = avg_log2FC)
write.csv(tbl,'/data/project/RCC_HWS/SS/sc/seurat/pro10.top20_markers.csv')

# Plotting----------------------------------------------------------------------------------------------------
# FeaturePlot
mks <- c('MS4A1','CD38','CD27','JCHAIN','CD14','FCGR3A','SELL','CX3CR1','HLA-DR','ITGB2','ITGAM','NRP1','CD1C','PPBP','CD3E','SLC4A10','FOXP3','CD4','CD8B','LEF1','IL7R','CD44','PRF1','NCAM1') 
png('/data/project/RCC_HWS/SS/sc/seurat/FeaturePlot.All2.png', width=1500,height=2300)
FeaturePlot(dt, features = mks, ncol=4)
dev.off()

# DotPlot for big groups
dt <- SetIdent(dt, value = dt@meta.data$seurat_clusters)
clsts <- c('0','1','3','8','10','13','16','17','2','12','7','11','14','6','9','18','20','4','5','19','15')
Idents(dt) <- factor(Idents(dt), levels= clsts)
mks <- c('CD3E','CD4','CD8A','CD8B','CD14','FCGR3A','IL7R','KLRB1','RORC','SELL','NCAM1','IFNG','CD1C','NRP1','MS4A1','JCHAIN','PPBP')
png('/data/project/RCC_HWS/SS/sc/seurat/pro10.DotPlot.All.png', width=600,height=300)
DotPlot(object = dt, features = mks) + theme(axis.text.x=element_text(angle=90)) + coord_flip()
dev.off()


# DotPlot for T cell states
# Ts <- subset(dt,idents=c(0,1,3,8,10,13,16,17,2,12))
clsts <- c('1','8','12','0','10','3','2','17','13','16')
Idents(Ts) <- factor(Idents(Ts), levels= clsts)
mks <- c('PECAM1','CCR7','CD27','BCL2','LEF1','CD44','CD28','IL7R','GZMB','IL2RB','SPN','KLRG1','PRF1','SLC4A10','FOXP3')
png('/data/project/RCC_HWS/SS/sc/seurat/pro10.DotPlot.T.states.png', width=600,height=400)
DotPlot(object = Ts, features = mks,col.min=0) + coord_flip()
dev.off()


# BoxPlots
# mks <- c('CD3E','CD4','CD8A','CD8B','CD14','FCGR3A','NCAM1','CD1C','NRP1','MS4A1','JCHAIN','PPBP')
# png('/data/project/RCC_HWS/SS/sc/seurat/pro10.VlnBoxPlot.all.png',width=1000,height=1200)
# VlnPlot(dt, features='CD3E', group.by='subtype_2',pt.size=0) + geom_boxplot(width=0.1,fill='white',outlier.size=0)
# dev.off()
#By default VlnPlot pulls the expression values from the data slot. So in your example above you are plotting the log1p-transformed corrected (discrete) counts. To plot the Pearson residuals set slot = "scale.data" in VlnPlot

mks <- c('CD3E','CD4','CD8A','CD8B','CD14','FCGR3A','NCAM1','CD1C','NRP1','MS4A1','JCHAIN','PPBP')
nk <- c('FCGR3A','NCAM1','IFNG')
png('/data/project/RCC_HWS/SS/sc/seurat/pro10.VlnBoxPlot.all.png',width=600,height=800)
VlnPlot(dt, features=nk, idents=c(6,9),split.by='subtype_2',assay='SCT',ncol=2)
dev.off()

df <- as.data.frame(as.matrix(GetAssayData(dt,assay='SCT',slot='data')))
df2 <- as.data.frame(as.matrix(GetAssayData(dt,assay='SCT',slot='counts')))
df %>%
    filter(gene == 'NCAM1') %>%
    ggplot(.,aes(x=,y=)) +
    geom_boxplot()


# ASSIGN CELLS!!!!!!!!--------------------------------------------------------------------------------------------------------
dt <- readRDS('/data/project/RCC_HWS/SS/sc/seurat/pro10.rds')

id <- c('CD4+ Tcm',
    'CD4+ Tn','CD8+ Teff','CD4+ Tem','naive B','memory B','CD56dim NK','classical MC','CD4+ Tn','CD56bright NK','CD4+ Tscm',
    'intermediate MC','CD8+ Tn','MAIT','nonclassical MC','platelet','Treg','gdT','MoDC','plasma','pDC')


lbd <- dt
names(id) <- levels(lbd)
dt_new <- RenameIdents(lbd, id)
dt_new$cell_type2 <- dt_new@active.ident

saveRDS(dt_new, '/data/project/RCC_HWS/SS/sc/seurat/pro10.rds')
################################################################################################################################



# ALL w/ SCTransform####################################################################################################################################
dt <- readRDS('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.rds')

dt <- PercentageFeatureSet(dt, pattern = "^MT-", col.name = "percent.mt")
dt <- SCTransform(dt, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
dt <- RunPCA(dt, verbose=FALSE)
dt <- RunUMAP(dt, dims = 1:50, verbose=FALSE)
dt <- FindNeighbors(dt, dims = 1:50, verbose=FALSE)
dt <- FindClusters(dt, resolution = 1, verbose=FALSE)

dt <- SetIdent(dt, value = dt@meta.data$seurat_clusters)
png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.umap.png')
DimPlot(dt, reduction = "umap", label=TRUE)
dev.off()
png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.umap.id.png')
DimPlot(dt, reduction = "umap", group.by='donor_id')
dev.off()
png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.umap.stat.png')
DimPlot(dt, reduction = "umap", group.by='Status')
dev.off()
png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.umap.subtype.png')
DimPlot(dt, reduction = "umap", group.by='subtype_2')
dev.off()


# Find Markers
dt <- SetIdent(dt, value = dt$seurat_clusters)
dt.markers <- FindAllMarkers(dt, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
# saveRDS(dt.markers,'/data/project/RCC_HWS/SS/sc/seurat/all_markers.rds')
tbl <- dt.markers %>%
    group_by(cluster) %>%
    slice_max(n = 20, order_by = avg_log2FC)
write.csv(tbl,'/data/project/RCC_HWS/SS/sc/seurat/pro9.2.top20_markers.csv')


# Plotting--------------------------------------------------------------------------------------------------------
#FeaturePlot
mks <- c('MS4A1','CD38','CD27','JCHAIN','ITGAM','CD14','FCGR3A','NRP1','CD1C','PPBP','CD3E','SLC4A10','FOXP3','CD4','CD8B','LEF1','IL7R','CD44','PRF1','NCAM1') 
png('/data/project/RCC_HWS/SS/sc/seurat/FeaturePlot.All.pro9.2.png', width=1500,height=2000)
FeaturePlot(dt, features = mks, ncol=4)
dev.off()


# DotPlot for big groups
dt <- SetIdent(dt, value = dt@meta.data$seurat_clusters)
clsts <- c('19','20','0','9','1','3','5','14','15','16','17','12','2','10','18','7','4','22','13','6','23','25','8','11','24','21')
Idents(dt) <- factor(Idents(dt), levels= clsts)
mks <- c('CD247','CD3E','CD4','CD8A','CD8B','CD14','FCGR3A','IL7R','KLRB1','RORC','SELL','NCAM1','IFNG','CD1C','NRP1','MS4A1','JCHAIN','PPBP')
png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.DotPlot.All.png', width=600,height=300)
DotPlot(object = dt, features = mks) + theme(axis.text.x=element_text(angle=90)) + coord_flip()
dev.off()

# c6 <- subset(dt,idents=c(6))
# mks <- c('CD3E','CD4','CD8A','CD8B','NCAM1','FCGR3A')
# png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.VlnPlot.c6.png',width=600,height=800)
# VlnPlot(c6, features=mks)
# dev.off()
# png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.DotPlot.c6.png',width=600,height=800)
# DotPlot(c6, features=mks)
# dev.off()

# DotPlot for T cell states
Ts <- subset(dt,idents=c(19,20,0,9,1,3,5,14,15,16,17,12))
Ts <- SetIdent(Ts, value = Ts@meta.data$seurat_clusters)
clsts <- c('20','3','5','14','15','12','1','0','19','17','16','9')
Idents(Ts) <- factor(Idents(Ts), levels= clsts)
mks <- c('PECAM1','SELL','CCR7','CD27','BCL2','LEF1','CD44','CD28','IL7R','GZMB','IL2RB','SPN','KLRG1','PRF1','SLC4A10','FOXP3','TRDC')
png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.DotPlot.T.states.png', width=600,height=400)
DotPlot(object = Ts, features = mks,col.min=0) + coord_flip()
dev.off()

#DotPlot for NK & MC & DC subsets
Os <- subset(dt,idents=c(2,10,))
Ts <- SetIdent(Ts, value = Ts@meta.data$seurat_clusters)
clsts <- c('20','3','5','14','15','12','1','0','19','17','16','9')
Idents(Ts) <- factor(Idents(Ts), levels= clsts)
mks <- c('PECAM1','SELL','CCR7','CD27','BCL2','LEF1','CD44','CD28','IL7R','GZMB','IL2RB','SPN','KLRG1','PRF1','SLC4A10','FOXP3','TRDC')
png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.DotPlot.T.states.png', width=600,height=400)
DotPlot(object = Ts, features = mks,col.min=0) + coord_flip()
dev.off()

#VlnPlot for NK subsets
mks <- c('NCAM1','FCGR3A','IFNG','TOX','ITGAE')
png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.VlnPlot.NK.png',width=600,height=400)
VlnPlot(dt, features=mks, idents=c(7,4,22,13,6),ncol=3) + geom_boxplot(width=0.2,fill='white')
dev.off()

png('/data/project/RCC_HWS/SS/sc/seurat/pro9.2.umap.test.png')
DimPlot(dt, reduction = "umap", label=TRUE)
dev.off()

# Labeling-----------------------------------------------------------------------------------------------------------
id <- c('CD4+ Tcm',
    'CD4+ Tn','CD8+ Teff','CD4+ Tem','naive B','memory B','CD56dim NK','classical MC','CD4+ Tn','CD56bright NK','CD4+ Tscm',
    'intermediate MC','CD8+ Tn','MAIT','nonclassical MC','platelet','Treg','gdT','MoDC','plasma','pDC')


lbd <- dt
names(id) <- levels(lbd)
dt_new <- RenameIdents(lbd, id)
dt_new$cell_type2 <- dt_new@active.ident

saveRDS(dt,'/data/project/RCC_HWS/SS/sc/seurat/pro9.2.rds')




#////////////////////////


require(reshape2)
require(ggplot2)

ex <- melt(df, id.vars=c("gene"))
colnames(ex) <- c("gene","group","exprs")

ggplot(data=ex, aes(x=group, y=exprs)) +

    geom_boxplot(position=position_dodge(width=0.5), outlier.shape=17, outlier.colour="red", outlier.size=0.1, aes(fill=group)) +

    #Choose which colours to use; otherwise, ggplot2 choose automatically
    #scale_color_manual(values=c("red3", "white", "blue")) + #for scatter plot dots
    scale_fill_manual(values=c("red", "royalblue")) + #for boxplot

    #Add the scatter points (treats outliers same as 'inliers')
    geom_jitter(position=position_jitter(width=0.3), size=3.0, colour="black") +

    #Set the size of the plotting window
    theme_bw(base_size=24) +

    #Modify various aspects of the plot text and legend
    theme(
        legend.position="none",
        legend.background=element_rect(),
        plot.title=element_text(angle=0, size=14, face="bold", vjust=1),

        axis.text.x=element_text(angle=45, size=14, face="bold", hjust=1.10),
        axis.text.y=element_text(angle=0, size=14, face="bold", vjust=0.5),
        axis.title=element_text(size=14, face="bold"),

        #Legend
        legend.key=element_blank(),     #removes the border
        legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
        legend.text=element_text(size=12),  #Text size
        title=element_text(size=12)) +      #Title text size

    #Change the size of the icons/symbols in the legend
    guides(colour=guide_legend(override.aes=list(size=2.5))) +

    #Set x- and y-axes labels
    xlab("Stem cell class") +
    ylab("Expression") +

    #ylim(0, 0) +

    ggtitle("My plot")




#////////////////////////













#DotPlot/VlnPlot for small groups